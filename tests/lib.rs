use sudoku::Sudoku;

#[test]
fn serialization() {
    let sudoku: Sudoku = "\
926718345
473562891
851493726
734985162
685321479
219647538
342159687
568274913
197836254
"
    .parse()
    .unwrap();
    assert_eq!(
        sudoku.to_string(),
        "\
926718345
473562891
851493726
734985162
685321479
219647538
342159687
568274913
197836254
"
    );
}

#[test]
fn solved_sudoku() {
    let sudoku: Sudoku = "\
926718345
473562891
851493726
734985162
685321479
219647538
342159687
568274913
197836254
"
    .parse()
    .unwrap();
    assert_eq!(
        sudoku.solve().unwrap().to_string(),
        "\
926718345
473562891
851493726
734985162
685321479
219647538
342159687
568274913
197836254
"
    );
}

#[test]
fn one_cell_sudoku() {
    let sudoku: Sudoku = "\
926718345
473562891
851493726
734985162
6853.1479
219647538
342159687
568274913
197836254
"
    .parse()
    .unwrap();
    assert_eq!(
        sudoku.solve().unwrap().to_string(),
        "\
926718345
473562891
851493726
734985162
685321479
219647538
342159687
568274913
197836254
"
    );
}

#[test]
fn sudoku_easy() {
    let sudoku: Sudoku = "\
92...8...
4.3.6289.
8.1..372.
..4...1..
.8..2..79
2.....53.
3.21.9.8.
.6...4913
197.3...4
"
    .parse()
    .unwrap();
    assert_eq!(
        sudoku.solve().unwrap().to_string(),
        "\
926718345
473562891
851493726
734985162
685321479
219647538
342159687
568274913
197836254
"
    );
}

#[test]
fn sudoku_medium() {
    let sudoku: Sudoku = "\
.9....83.
..36...4.
..8......
2...9....
...438...
9.5.6....
...7..9..
.....4..6
17......5
"
    .parse()
    .unwrap();
    assert_eq!(
        sudoku.solve().unwrap().to_string(),
        "\
697245831
513689247
428371659
234597168
761438592
985162374
842756913
359814726
176923485
"
    );
}

#[test]
fn sudoku_hard() {
    let sudoku: Sudoku = "\
...7.....
1........
...43.2..
........6
...5.9...
......418
....81...
..2....5.
.4....3..
"
    .parse()
    .unwrap();
    assert_eq!(
        sudoku.solve().unwrap().to_string(),
        "\
264715839
137892645
598436271
423178596
816549723
759623418
375281964
982364157
641957382
"
    );
}

#[test]
fn arto_inkala() {
    let sudoku: Sudoku = "\
8........
..36.....
.7..9.2..
.5...7...
....457..
...1...3.
..1....68
..85...1.
.9....4..
"
    .parse()
    .unwrap();
    assert_eq!(
        sudoku.solve().unwrap().to_string(),
        "\
812753649
943682175
675491283
154237896
369845721
287169534
521974368
438526917
796318452
"
    );
}

#[test]
fn unsolvable_sudokus() {
    let sudokus = [
        "..9.7...5..21..9..1...28....7...5..1..851.....5....3.......3..68........21.....87", // box duplicate
        "6.159.....9..1............4.7.314..6.24.....5..3....1...6.....3...9.2.4......16..", // column duplicate
        ".4.1..35.............2.5......4.89..26.....12.5.3....7..4...16.6....7....1..8..2.", // row duplicate
        "..9.287..8.6..4..5..3.....46.........2.71345.........23.....5..9..4..8.7..125.3..", // unsolvable square
        ".9.3....1....8..46......8..4.5.6..3...32756...6..1.9.4..1......58..2....2....7.6.", // unsolvable box
        "....41....6.....2...2......32.6.........5..417.......2......23..48......5.1..2...", // unsolvable column
        "9..1....4.14.3.8....3....9....7.8..18....3..........3..21....7...9.4.5..5...16..3", // unsolvable row
    ];
    assert!(sudokus
        .iter()
        .all(|sudoku| sudoku.parse::<Sudoku>().unwrap().solve().is_none()));
}

#[test]
fn multiple_solutions() {
    let sudoku: Sudoku = "\
.........
..36.....
.7..9.2..
.5...7...
....457..
...1...3.
..1....68
..85...1.
.9....4..
"
    .parse()
    .unwrap();
    assert_eq!(sudoku.solutions().count(), 292);
}
